# 家計簿アプリ作成プロンプト

**アプリケーションの目的と概要**

**ターゲットユーザー:**  20代〜30代の個人、家計簿初心者〜中級者

**主な目的:**  日々の支出をスタイリッシュに記録・分析し、スマートな家計管理を実現する。

**主要機能:**
- 支出入力 (必須): 店舗、商品、金額、カテゴリ、購入日を記録
- 収入入力 (必須): 収入源、金額、日付を記録
- 月ごとの支出・収入集計 (必須): 月ごとの合計支出、収入、収支を自動計算
- カテゴリ別支出表示 (必須): 支出をカテゴリ別にグラフで表示 (円グラフ、棒グラフなどデザインに合わせて)
- 予算設定 (できれば): 月ごとの予算を設定し、達成度合いを可視化
- レポート表示 (できれば): 月次レポートを自動生成 (支出の推移、カテゴリ別内訳など)
- ユーザー認証機能 (必須):  アカウント登録、ログイン機能

**コンセプト:**  ゲームやアニメに出てきそうな、スタイリッシュでクールなUI/UX。家計簿管理を単なる作業ではなく、心を奪われるような体験にする。多機能でありながら、直感的に操作できる洗練されたデザインを目指す。

**UI/UXの詳細**

**画面構成:**
- 起動画面: アプリのロゴ (幾何学的な模様や先進的なデザイン) とクールなキャッチコピーを表示
- ログイン/登録画面:  メールアドレス/パスワードによるアカウント登録、ログインフォーム
- メイン画面: ダッシュボード形式。月間収支、今月の支出グラフ、最近の取引履歴などをタイル状に表示。背景はダークテーマ。
- 店舗選択画面:  モーダル形式で画面中央に表示。登録済みの店舗をリスト表示。
- 店舗新規登録画面:  モーダル形式で画面中央に表示。店舗名入力フォームと登録ボタンを配置。
- 商品入力画面:  モーダル形式で画面中央に表示。選択された店舗名を表示。登録済み商品をリスト表示。金額、カテゴリ、日付選択項目を配置。
- 商品新規登録画面:  モーダル形式で画面中央に表示。商品名、価格などの入力フォームと登録ボタンを配置。
- 入力画面 (収入): モーダル形式で画面中央に表示。収入源選択、金額入力、日付選択項目を配置。
- 集計画面:  タブ切り替え式 (月別/年別/カテゴリ別)。グラフ表示 (折れ線グラフ、棒グラフ、レーダーチャートなど)、詳細データテーブルを表示。
- 設定画面:  アカウント設定、予算設定、通知設定、データエクスポート機能などをリスト形式で表示。

**操作フロー (支出入力):**
1. メイン画面右下の「+」ボタン (青色の光るアイコン) をタップで入力選択画面を表示 (支出/収入 選択)
2. 「支出」を選択すると、店舗選択画面をモーダル表示
3. 店舗選択画面:
    - 登録済みの店舗をリスト表示 (店舗名、アイコン付き)。タッチで選択可能。
    - リスト最下部に「新規登録」ボタン (光るエフェクト付き) を配置。
    - 「新規登録」ボタンをタップで店舗新規登録画面へモーダル遷移。
4. 店舗新規登録画面:
    - 画面上部に「店舗新規登録」のタイトルを表示。
    - 店舗名入力フォーム (テキストフィールド、プレースホルダー: 例「〇〇スーパー △△店」) を配置。
    - 「登録」ボタン (光るエフェクト付き) と「キャンセル」ボタンを配置。
    - 「登録」ボタンタップで店舗情報をSTOREテーブルに登録。登録完了後、商品入力画面へモーダル遷移 (登録した店舗が選択された状態)。
    - 「キャンセル」ボタンタップで店舗選択画面へ戻る。
5. 商品入力画面:
    - 画面上部に選択された店舗名 (例: 「〇〇スーパー △△店」) を表示。
    - 登録済みの商品をリスト表示 (商品名、価格、アイコン付き)。タッチで選択可能。
    - リスト最下部に「新規登録」ボタン (「+ 新規商品登録」のようなアイコンとテキスト) を配置。
    - 金額入力フィールド (カスタムテンキーパッド) を配置。
    - カテゴリ選択ドロップダウンリスト (アイコン付きカテゴリリスト) を配置。
    - 日付入力カレンダーピッカー (本日日付をフォーカス表示) を配置。
    - 「決定」ボタン (光るエフェクト付き) をタップで取引情報をTRANSACTIONテーブルに登録。メイン画面 (ダッシュボード) に登録内容を反映。
    - 「新規登録」ボタンをタップで商品新規登録画面へモーダル遷移。
6. 商品新規登録画面:
    - 画面上部に「商品新規登録」のタイトルを表示。
    - 商品名入力フォーム (テキストフィールド、プレースホルダー: 例「〇〇パン」) を配置。
    - 価格入力フォーム (テンキーパッド、数値入力のみ) を配置。
    - (オプション) 税区分選択 (税込み/税抜き) ドロップダウンリスト。
    - (オプション) 割引額入力フォーム (テンキーパッド、数値入力のみ)。
    - 「登録」ボタン (光るエフェクト付き) と「キャンセル」ボタンを配置。
    - 「登録」ボタンタップで商品情報をGOODSテーブルに登録。登録完了後、商品入力画面へモーダル遷移 (一覧には登録した商品が表示される)。
    - 「キャンセル」ボタンタップで商品入力画面へ戻る。

**操作フロー (収入入力):**
1. メイン画面右下の「+」ボタン (青色の光るアイコン) をタップで入力選択画面を表示 (支出/収入 選択)
2. 「収入」を選択すると、入力画面 (収入) をモーダル表示
3. 入力画面 (収入) で各項目を入力し、「決定」ボタン (光るエフェクト付き) をタップ
4. メイン画面 (ダッシュボード) に登録した収入がリアルタイムに反映される

**入力項目の詳細 (支出入力):**
- 金額入力:  カスタムデザインのテンキーパッドを表示。半角数字のみ入力可能。入力中は金額がアニメーション表示される。
- カテゴリ選択:  アイコン付きカテゴリリスト (食費:🍔, 日用品:🧴, 交通費: 🚄, 娯楽費: 🎮, 交際費: 🍻, その他: ⚙️) から選択。
- 日付入力:  カスタムデザインのカレンダーピッカーで選択。本日日付をフォーカス表示。

**入力項目の詳細 (収入入力):**
- 収入源選択:  ドロップダウンリストから選択。リスト項目は (給与, 賞与, 副業, 投資, その他)。
- 金額入力:  カスタムデザインのテンキーパッドを表示。半角数字のみ入力可能。入力中は金額がアニメーション表示される。
- 日付入力:  カスタムデザインのカレンダーピッカーで選択。本日日付をフォーカス表示。

**UIデザイン:**
- 全体的にダークテーマ (黒、濃い青、濃いグレーなど) を基調とした、メタリックで硬質なイメージのデザイン。
- メインカラーは青、アクセントカラーは黄色やオレンジなど、コントラストの強い色を使用。
- 各ボタンやアイコンはシャープでエッジの効いたデザインにする。ホバーエフェクトやアニメーションを多用する。
- フォントはゴシック体、またはSF映画に出てくるような先進的なフォントを使用する。
- ダッシュボードは情報量が多くても整理されて見えるように、タイル状のレイアウトを効果的に活用する。
- グラフは3Dグラフや、アニメーション付きのインタラクティブなグラフを検討する。

**機能要件の詳細**

**入力機能:**
- 割引の扱い: 割引額入力フィールドを配置。割引後の価格を自動計算し、内訳を表示する。
- 税金の扱い: 税率設定機能 (設定画面) を設け、税込み/税抜き を選択可能にする。
- ポイント利用: ポイント利用額入力フィールドを配置。実質支払金額を算出し、ポイント利用額を отдельный 項目として記録する。
- メモ機能:  各取引にメモ (自由記述) を追加できるテキストエリアを配置。
- レシート読み取り機能 (できれば):  WEB API連携によるレシート画像解析機能。解析状況をプログレスバーで表示。

**集計・分析機能:**
- 月次集計: 月ごとの収入、支出、収支を折れ線グラフと棒グラフ (複合グラフ) で表示。
- 年次集計: 年ごとの収入、支出、収支を棒グラフで表示。年ごとの成長率を процент表示。
- カテゴリ別集計: カテゴリごとの支出金額を円グラフまたはドーナツグラフで表示。割合を процент表示。
- 期間比較:  指定期間 (月/年単位) での支出推移を折れ線グラフで表示。前期間との差分を процент表示。
- 店舗別集計 (できれば): 店舗ごとの支出金額ランキングを棒グラフで表示。ランキング形式でトップ5店舗を表示。
- 商品別集計 (できれば): 商品ごとの支出金額ランキングをリスト形式で表示。

**検索・フィルタ機能:**
- キーワード検索:  店舗名、商品名、メモなどを対象とした全文検索 (あいまい検索、サジェスト機能付き)。
- 期間指定:  カレンダー範囲選択による期間指定。プリセット期間 (今月、先月、今年、昨年など) ボタンも用意。
- カテゴリ絞り込み:  チェックボックスによるカテゴリ絞り込み (複数選択可)。
- 店舗絞り込み (できれば):  チェックボックスによる店舗絞り込み (複数選択可)。

**データ出力機能:**
- CSVエクスポート:  取引データをCSV形式でダウンロード (期間指定、フィルタ条件反映)。
- レポート出力 (できれば):  月次レポート (PDF形式) を生成・ダウンロード。グラフ画像もレポートに включить.

**通知機能:**
- 予算超過アラート:  予算超過時にプッシュ通知 (WEB Push API) とアプリ内通知で警告。通知設定 (閾値、通知タイミング) を設定画面で変更可能。
- 月次レポート通知 (できれば):  毎月初めに前月の月次レポートをプッシュ通知 (WEB Push API) とアプリ内通知で送信。ON/OFF設定。

**技術的な要件**

**開発言語:**  PHP
**フレームワーク:**  特になし (Vanilla PHP で構築)
**データベース:**  SQLite3 (ファイルベースのデータベース)
**動作環境:**  Android, iOS (WebViewアプリとしてラップ), WEB (PC, スマートフォン ブラウザ)
**ユーザー認証:**  必須 (メールアドレス/パスワード認証、セッション管理、パスワードリセット機能)
**セキュリティ要件:**
    - パスワードはハッシュ化してデータベースに保存 (bcrypt推奨)。
    - 通信は全てHTTPSを使用。
    - SQLインジェクション、クロスサイトスクリプティング (XSS) 対策を施す。
    - 個人情報 (ユーザー名など) は暗号化してデータベースに保存 (AES-256など)。

**例外処理とエラーハンドリング**

**入力値のバリデーション:**
- 金額: 数値のみ入力可能。0以上の数値を許可。入力値チェックは JavaScript と PHP の両方で行う。
- 日付:  YYYY-MM-DD形式のみ許可。不正な日付はエラー。過去日付も許可。未来日付は JavaScript で警告表示。
- 必須項目:  支出入力時は店舗名、商品名、金額、カテゴリは必須入力。未入力時はリアルタイムにエラーメッセージをモーダル表示。収入入力時は収入源、金額は必須入力。

**エラー発生時の処理:**
- レシート読み取りAPIエラー:  APIレスポンスがエラーコードの場合、エラー内容をモーダル表示。「再試行」ボタンと「手動入力に切り替え」ボタンを表示。
- データベースエラー:  SQLite3 への書き込み・読み込みエラー発生時、詳細なエラーログをファイルに出力。ユーザーには「システムエラーが発生しました。時間を置いて再度お試しください。」という簡潔なエラーメッセージをモーダル表示。
- ユーザー認証エラー:  ログイン失敗、登録失敗時など、エラー内容に応じた適切なエラーメッセージをフォーム рядом に表示。
- 予期せぬエラー:  try-catch ブロックで例外をキャッチし、エラーログ出力。ユーザーには「予期せぬエラーが発生しました。アプリを再起動してください。」というメッセージをモーダル表示。

**テーブル定義 (SQLite3)**

```sql
CREATE TABLE users (
    user_id TEXT PRIMARY KEY, -- UUID
    user_name TEXT NOT NULL,
    email TEXT UNIQUE NOT NULL,
    password_hash TEXT NOT NULL, -- ハッシュ化されたパスワード
    created_at TEXT DEFAULT CURRENT_TIMESTAMP,
    updated_at TEXT DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE transactions (
    transaction_id TEXT PRIMARY KEY, -- UUID
    store_id TEXT, -- UUID
    goods_id TEXT, -- UUID
    user_id TEXT NOT NULL, -- UUID
    price REAL NOT NULL, -- DECIMAL(10, 2) 相当
    buy_at TEXT NOT NULL, -- DATE 相当 (YYYY-MM-DD)
    income REAL,  -- 収入額 (支出の場合はNULL) -- DECIMAL(10, 2) 相当
    category TEXT, -- カテゴリ (食費、日用品、交通費など)
    memo TEXT,             -- メモ欄
    created_at TEXT DEFAULT CURRENT_TIMESTAMP,
    updated_at TEXT DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (store_id) REFERENCES stores(store_id),
    FOREIGN KEY (goods_id) REFERENCES goods(goods_id)
);

CREATE TABLE stores (
    store_id TEXT PRIMARY KEY, -- UUID
    store_name TEXT NOT NULL,
    display TEXT,
    created_at TEXT DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE goods (
    goods_id TEXT PRIMARY KEY, -- UUID
    goods_name TEXT NOT NULL,
    receipt_name TEXT,
    price REAL, -- NUMBAR -> NUMBER, DECIMAL(10, 2) 相当
    tax REAL, -- NUMBAR -> NUMBER, DECIMAL(5, 2) 相当
    discount REAL, -- NUMBAR -> NUMBER, DECIMAL(5, 2) 相当
    description TEXT,
    display TEXT,
    created_at TEXT DEFAULT CURRENT_TIMESTAMP
);